name: Build and Push Docker Image

on:
  push:
    branches: [ dev, docker ]
    tags: [ 'v*' ]
  # Build new image every day at midnight
  schedule:
    # https://crontab.guru/#0_6_*_*_*
    - cron: '0 6 * * *'
  # TODO: add inputs
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ckb-fiber

jobs:
  get-fiber-versions:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      fiber_latest_commit: ${{ steps.get_fiber_latest_commit.outputs.commit_sha }}
      fiber_latest_tag: ${{ steps.get_fiber_latest_tag.outputs.tag }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      REPO: nervosnetwork/fiber
    steps:
      - id: get_fiber_latest_commit
        name: Get the latest commmit on the main branch
        env:
          BRANCH: main
        run: |
          commit_sha=$(curl -s https://api.github.com/repos/$REPO/commits/$BRANCH | jq -r .sha)
          echo "commit_sha=${commit_sha}" >> $GITHUB_OUTPUT
      
      - id: get_fiber_latest_tag
        name: Get the latest tag of fiber
        run: |
          echo "Get latest tag of $REPO"
          tag=$(curl -s https://api.github.com/repos/$REPO/tags | jq -r '.[0].name')

          echo "Try to pull the image with tag $tag"
          docker pull "${REGISTRY}/${IMAGE_NAME}:${tag}" || true

          echo "Check image existence and set output"
          if [ -z "$(docker images -q $REGISTRY/$IMAGE_NAME:$tag)" ]; then
            echo "tag=${tag}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.get_fiber_latest_commit.outputs.commit_sha }}" >> $GITHUB_OUTPUT
          fi

      - id: set-matrix
        name: Set up matrix
        run: |
          matrix=( "${{ steps.get_fiber_latest_commit.outputs.commit_sha }}" )
          if [[ "${{ steps.get_fiber_latest_commit.outputs.commit_sha }}" != "${{ steps.get_fiber_latest_tag.outputs.tag }}" ]]; then
            matrix[${#matrix[@]}]="${{ steps.get_fiber_latest_tag.outputs.tag }}"
          fi

          joined=$(printf '"%s",' "${matrix[@]}" | sed 's/,$//')
          formatted_array="[ ${joined} ]"
          echo "$formatted_array"
          echo matrix="$formatted_array" >> $GITHUB_OUTPUT

  build-and-push-docker:
    needs: get-fiber-versions
    strategy:
      fail-fast: false
      matrix:
        FIBER_VERSION: ${{ fromJSON(needs.get-fiber-versions.outputs.matrix) }}
    env:
      CKB_CLI_VERSION: v1.12.0
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=raw,value=fiber-commit-${{ matrix.FIBER_VERSION }}
            type=raw,value=fiber-commit-${{ matrix.FIBER_VERSION }}-ckb-cli-${{ env.CKB_CLI_VERSION }}
            type=raw,value=${{ matrix.FIBER_VERSION }}
            type=raw,value=${{ matrix.FIBER_VERSION }}-ckb-cli-${{ env.CKB_CLI_VERSION }}
            type=ref,event=branch,suffix=-{{date 'YYYYMMDDHHmm'}}
          labels: |
            org.opencontainers.image.source=https://github.com/nervosnetwork/fiber
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            FIBER_VERSION=${{ matrix.FIBER_VERSION }}
            CKB_CLI_VERSION=${{ env.CKB_CLI_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
